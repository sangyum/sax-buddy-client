// Mocks generated by Mockito 5.4.6 from annotations
// in sax_buddy/test/agents/initial_assessment_agent_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sax_buddy/agents/models/assessment_models.dart' as _i2;
import 'package:sax_buddy/agents/services/llm_service.dart' as _i3;
import 'package:sax_buddy/services/logging_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePerformanceAnalysis_0 extends _i1.SmartFake
    implements _i2.PerformanceAnalysis {
  _FakePerformanceAnalysis_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSkillProfile_1 extends _i1.SmartFake implements _i2.SkillProfile {
  _FakeSkillProfile_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LLMService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLLMService extends _i1.Mock implements _i3.LLMService {
  @override
  _i4.Future<Map<String, dynamic>> processQuestionnaire(
    _i2.QuestionnaireResponse? response,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#processQuestionnaire, [response]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
            returnValueForMissingStub: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<_i2.PerformanceAnalysis> analyzePerformance(
    Map<String, dynamic>? performanceData,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#analyzePerformance, [performanceData]),
            returnValue: _i4.Future<_i2.PerformanceAnalysis>.value(
              _FakePerformanceAnalysis_0(
                this,
                Invocation.method(#analyzePerformance, [performanceData]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i2.PerformanceAnalysis>.value(
                  _FakePerformanceAnalysis_0(
                    this,
                    Invocation.method(#analyzePerformance, [performanceData]),
                  ),
                ),
          )
          as _i4.Future<_i2.PerformanceAnalysis>);

  @override
  _i4.Future<_i2.SkillProfile> generateSkillProfile(
    Map<String, dynamic>? consolidatedData,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateSkillProfile, [consolidatedData]),
            returnValue: _i4.Future<_i2.SkillProfile>.value(
              _FakeSkillProfile_1(
                this,
                Invocation.method(#generateSkillProfile, [consolidatedData]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.SkillProfile>.value(
              _FakeSkillProfile_1(
                this,
                Invocation.method(#generateSkillProfile, [consolidatedData]),
              ),
            ),
          )
          as _i4.Future<_i2.SkillProfile>);
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i5.LoggingService {
  @override
  void initialize({bool? isDebug = false}) => super.noSuchMethod(
    Invocation.method(#initialize, [], {#isDebug: isDebug}),
    returnValueForMissingStub: null,
  );

  @override
  void logInfo(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#logInfo, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void logDebug(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#logDebug, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void logWarning(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#logWarning, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void logError(
    String? message, {
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? data,
  }) => super.noSuchMethod(
    Invocation.method(
      #logError,
      [message],
      {#error: error, #stackTrace: stackTrace, #data: data},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logUserAction(String? action, {Map<String, dynamic>? context}) =>
      super.noSuchMethod(
        Invocation.method(#logUserAction, [action], {#context: context}),
        returnValueForMissingStub: null,
      );

  @override
  void logAuthEvent(
    String? event, {
    String? userId,
    Map<String, dynamic>? details,
  }) => super.noSuchMethod(
    Invocation.method(
      #logAuthEvent,
      [event],
      {#userId: userId, #details: details},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logScreenView(String? screenName, {Map<String, dynamic>? parameters}) =>
      super.noSuchMethod(
        Invocation.method(
          #logScreenView,
          [screenName],
          {#parameters: parameters},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logNetworkCall(
    String? method,
    String? url, {
    int? statusCode,
    Map<String, dynamic>? data,
  }) => super.noSuchMethod(
    Invocation.method(
      #logNetworkCall,
      [method, url],
      {#statusCode: statusCode, #data: data},
    ),
    returnValueForMissingStub: null,
  );
}
